// -*- mode: C++ -*-
/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2013, Ryohei Ueda and JSK Lab
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/o2r other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

#include <jsk_topic_tools/rosparam_utils.h>
#include "jsk_footstep_controller/footcoords.h"
#include <std_msgs/String.h>

namespace jsk_footstep_controller
{

    Footcoords::Footcoords()
    {
        ros::NodeHandle nh, pnh("~");

        // read parameter
        pnh.param("output_frame_id", output_frame_id_, std::string("odom_on_ground"));
        pnh.param("parent_frame_id", parent_frame_id_, std::string("odom"));
        pnh.param("force_threshold", force_thr_, 1.0);
        pub_state_ = pnh.advertise<std_msgs::String>("state", 1))
        before_on_the_air_ = true;
        sub_lfoot_force_.subscribe(nh, "lfsensor", 1);
        sub_rfoot_force_.subscribe(nh, "rfsensor", 1);
        sync_ = boost::make_shared<message_filters::Synchronizer<SyncPolicy> >(100);
        sync_->connectInput(sub_lfoot_force_, sub_rfoot_force_);
        sync_->registerCallback(boost::bind(&Footcoords::filter, this, _1, _2));
    }

    Footcoords::~Footcoords()
    {

    }



    void Footcoords::filter(const geometry_msgs::WrenchStamped::ConstPtr& lfoot,
                            const geometry_msgs::WrenchStamped::ConstPtr& rfoot)
    {
        if (lfoot->wrench.force.z < force_thr_ &&
            rfoot->wrench.force.z < force_thr_) {
            before_on_the_air_ = true;
            publishState("air");
        }
        else {
            if (lfoot->wrench.force.z > force_thr_ &&
                rfoot->wrench.force.z > force_thr_) {
                // on ground
                publishState("ground");
            }
            else if (lfoot->wrench.force.z > force_thr_) {
                // only left
                publishState("lfoot");
            }
            else if (rfoot->wrench.force.z > force_thr_) {
                // only right
                publishState("rfoot");
            }
        }
    }

}

int main(int argc, char** argv)
{
    ros::init(argc, argv, "footcoords");
    jsk_footstep_controller::Footcoords c;
    ros::spin();
}
